#!/usr/bin/env node

/**
 * CareerFlow Supabase Setup Script
 * 
 * This script helps you set up a new Supabase project for CareerFlow
 * Run with: node setup-new-supabase.js
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

async function setupSupabase() {
  console.log('🚀 CareerFlow Supabase Setup');
  console.log('============================\n');

  console.log('This script will help you set up a new Supabase project for CareerFlow.\n');

  // Check if .env already exists
  const envPath = path.join(process.cwd(), '.env');
  if (fs.existsSync(envPath)) {
    const overwrite = await question('⚠️  .env file already exists. Do you want to overwrite it? (y/N): ');
    if (overwrite.toLowerCase() !== 'y') {
      console.log('Setup cancelled.');
      rl.close();
      return;
    }
  }

  console.log('\n📋 Please provide your Supabase project details:');
  console.log('(You can find these in your Supabase project settings > API)\n');

  const supabaseUrl = await question('🔗 Supabase Project URL (https://your-project.supabase.co): ');
  const supabaseAnonKey = await question('🔑 Supabase Anon Key: ');
  
  console.log('\n📋 Please provide your Clerk authentication details:');
  console.log('(You can find these in your Clerk dashboard)\n');
  
  const clerkPublishableKey = await question('🔐 Clerk Publishable Key: ');

  console.log('\n📋 Application Configuration:');
  const appUrl = await question('🌐 App URL (default: http://localhost:5173): ') || 'http://localhost:5173';
  const debugMode = await question('🐛 Enable debug mode? (y/N): ');

  // Create .env file
  const envContent = `# =====================================================
# CareerFlow Environment Variables
# =====================================================
# Generated by setup script on ${new Date().toISOString()}

# =====================================================
# Supabase Configuration
# =====================================================
VITE_SUPABASE_URL=${supabaseUrl}
VITE_SUPABASE_ANON_KEY=${supabaseAnonKey}

# =====================================================
# Clerk Authentication
# =====================================================
VITE_CLERK_PUBLISHABLE_KEY=${clerkPublishableKey}

# =====================================================
# Application Configuration
# =====================================================
VITE_APP_URL=${appUrl}

# =====================================================
# Development Settings
# =====================================================
VITE_DEBUG_MODE=${debugMode.toLowerCase() === 'y' ? 'true' : 'false'}
`;

  try {
    fs.writeFileSync(envPath, envContent);
    console.log('\n✅ .env file created successfully!');
  } catch (error) {
    console.error('\n❌ Error creating .env file:', error.message);
    rl.close();
    return;
  }

  console.log('\n📋 Next Steps:');
  console.log('==============');
  console.log('1. 📊 Set up your database schema:');
  console.log('   - Go to your Supabase project dashboard');
  console.log('   - Navigate to SQL Editor');
  console.log('   - Run the content from: supabase-complete-schema.sql');
  console.log('');
  console.log('2. 🗄️  Set up storage buckets:');
  console.log('   - Run the content from: supabase-storage-setup.sql');
  console.log('');
  console.log('3. 🧪 Add sample data (optional):');
  console.log('   - Run the content from: sample-data.sql');
  console.log('');
  console.log('4. 🔐 Configure Clerk JWT template:');
  console.log('   - Go to your Clerk dashboard');
  console.log('   - Navigate to JWT Templates');
  console.log('   - Create a new template named "supabase"');
  console.log('   - Use the configuration from the setup guide');
  console.log('');
  console.log('5. 🚀 Start your development server:');
  console.log('   npm install');
  console.log('   npm run dev');
  console.log('');
  console.log('📚 For detailed instructions, see: SUPABASE_NEW_SETUP_GUIDE.md');
  console.log('');
  console.log('🎉 Setup complete! Happy coding!');

  rl.close();
}

// Handle Ctrl+C
process.on('SIGINT', () => {
  console.log('\n\nSetup cancelled.');
  rl.close();
  process.exit(0);
});

// Run setup
setupSupabase().catch(error => {
  console.error('\n❌ Setup failed:', error.message);
  rl.close();
  process.exit(1);
});
